# 01.把我们的日志信息  输出到Console控制台上
#  ConsoleAppender  console=new ConsoleAppender();
#log4j.appender.console规范写法   console就是一个对象名称 可以自定义
log4j.appender.console=org.apache.log4j.ConsoleAppender
#对象名.属性  target输出地
log4j.appender.console.Target=System.out
# 创建输出格式所需要的对象 Layout
log4j.appender.console.Layout=org.apache.log4j.PatternLayout
#  设置输出格式
log4j.appender.console.Layout.ConversionPattern=%d{yyyy-MM-dd hh:mm:ss} %l  %m  %n


#02.输出到文件中  根据文件大小自动创建
log4j.appender.file=org.apache.log4j.RollingFileAppender
#指定文件输出位置
log4j.appender.file.File=e\:/log/log4j.log
#设置文件最大容量
log4j.appender.file.MaxFileSize=1kb
#如果超过了文件大小创建几个新文件
log4j.appender.file.MaxBackupIndex=3
#如果文件都满了  设置是否覆盖之前的文件
log4j.appender.file.Append=true
# 创建输出格式所需要的对象 Layout
log4j.appender.file.Layout=org.apache.log4j.PatternLayout
#  设置输出格式
log4j.appender.file.Layout.ConversionPattern=%d{yyyy-MM-dd hh:mm:ss} %l  %m  %n


#03.每分钟生成一个新文件
log4j.appender.file2=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file2.Append=true
#DatePattern共分为6种方式
log4j.appender.file2.DatePattern=yyyy-MM-dd-hh-mm'.log'
log4j.appender.file2.File=e\:/log/log4j.log
# 创建输出格式所需要的对象 Layout
log4j.appender.file2.Layout=org.apache.log4j.PatternLayout
#  设置输出格式
log4j.appender.file2.Layout.ConversionPattern=%d{yyyy-MM-dd hh:mm:ss} %l  %m  %n





#通过log4j.rootLogger  来指定我们的日志输出级别和输出目的地
# 级别必须位于第一个位置，只能有一个
#log4j.rootLogger=trace,console,file2

#指定包中的日志输出
log4j.rootLogger=debug,console,file2




